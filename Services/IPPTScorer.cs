public static class IPPTScorer
{
    private static readonly int[,] MaleSitUpScoreTable = new int[53, 9]
    {
        {0,0,0,0,0,0,0,0,1},  // 7
        {0,0,0,0,0,0,0,1,2},  // 8
        {0,0,0,0,0,0,1,2,3},  // 9
        {0,0,0,0,0,1,2,3,4},  // 10
        {0,0,0,0,1,2,3,4,5},  // 11
        {0,0,0,1,2,3,4,5,6},  // 12
        {0,0,1,2,3,4,5,6,6},  // 13
        {0,1,2,3,4,5,6,6,7},  // 14
        {1,2,3,4,5,6,6,7,7},  // 15
        {2,3,4,5,6,6,7,7,8},  // 16
        {3,4,5,6,6,7,7,8,9},  // 17
        {4,5,6,6,7,7,8,9,10}, // 18
        {5,6,6,7,7,8,9,10,11},// 19
        {6,6,7,7,8,9,10,11,12},// 20
        {6,7,7,8,9,10,11,12,13},// 21
        {7,7,8,9,10,11,12,13,13},// 22
        {7,8,9,10,11,12,13,13,14},// 23
        {8,9,10,11,12,13,13,14,14},// 24
        {9,10,11,12,13,13,14,14,15},// 25
        {10,11,12,13,13,14,14,15,16},// 26
        {11,12,13,13,14,14,15,16,17},// 27
        {12,13,13,14,14,15,16,17,18},// 28
        {13,13,14,14,15,16,17,18,18},// 29
        {13,14,14,15,16,17,18,18,19},// 30
        {14,14,15,16,17,18,18,19,19},// 31
        {14,15,16,17,18,18,19,19,20},// 32
        {15,16,17,18,18,19,19,20,20},// 33
        {16,17,18,18,19,19,20,20,20},// 34
        {17,18,18,19,19,20,20,20,20},// 35
        {18,18,19,19,20,20,20,20,21},// 36
        {18,19,19,20,20,20,20,21,21},// 37
        {19,19,20,20,20,20,21,21,21},// 38
        {19,20,20,20,20,21,21,21,21},// 39
        {20,20,20,20,21,21,21,21,22},// 40
        {20,20,20,21,21,21,21,22,22},// 41
        {20,20,21,21,21,21,22,22,22},// 42
        {20,21,21,21,21,22,22,22,22},// 43
        {21,21,21,21,22,22,22,22,23},// 44
        {21,21,21,22,22,22,22,23,23},// 45
        {21,21,22,22,22,22,23,23,23},// 46
        {21,22,22,22,22,23,23,23,23},// 47
        {22,22,22,22,23,23,23,23,24},// 48
        {22,22,22,23,23,23,23,24,24},// 49
        {22,22,23,23,23,23,24,24,24},// 50
        {22,23,23,23,23,24,24,24,24},// 51
        {23,23,23,23,24,24,24,24,25},// 52
        {23,23,23,24,24,24,24,25,25},// 53
        {23,23,24,24,24,24,25,25,25},// 54
        {23,24,24,24,24,25,25,25,25},// 55
        {24,24,24,24,25,25,25,25,25},// 56
        {24,24,24,25,25,25,25,25,25},// 57
        {24,24,25,25,25,25,25,25,25},// 58
        {24,25,25,25,25,25,25,25,25},// 59
    };

    private static readonly int[,] FemaleSitUpScoreTable = new int[45, 9]
    {
        {0,0,0,0,0,0,0,0,1},  // 7
        {0,0,0,0,0,0,0,1,2},  // 8
        {0,0,0,0,0,0,1,2,4},  // 9
        {0,0,0,0,0,1,2,4,6},  //10
        {0,0,0,0,1,2,4,6,8},  //11
        {0,0,0,1,2,4,6,8,10}, //12
        {0,0,1,2,4,6,8,10,11},//13
        {0,1,3,4,6,8,10,11,12},//14
        {1,2,4,6,8,10,11,12,13},//15
        {2,4,6,8,10,11,12,13,14},//16
        {4,6,8,10,11,12,13,14,15},//17
        {6,8,10,11,12,13,14,15,15},//18
        {8,10,11,12,13,14,15,15,16},//19
        {10,11,12,13,14,15,15,16,16},//20
        {11,12,13,14,15,15,16,16,17},//21
        {12,13,14,15,15,16,16,17,18},//22
        {13,14,15,15,16,16,17,18,18},//23
        {14,15,15,16,16,17,18,18,19},//24
        {15,15,16,16,17,18,18,19,19},//25
        {15,16,16,17,18,18,19,19,20},//26
        {16,16,17,18,18,19,19,20,20},//27
        {16,17,18,18,19,19,20,20,20},//28
        {17,18,18,19,19,20,20,20,21},//29
        {18,18,19,19,20,20,20,21,21},//30
        {18,18,19,20,20,20,21,21,21},//31
        {18,19,19,20,20,21,21,21,22},//32
        {19,19,20,20,21,21,21,22,22},//33
        {19,19,20,21,21,21,22,22,22},//34
        {19,20,20,21,21,22,22,22,23},//35
        {20,20,21,21,22,22,22,23,23},//36
        {20,20,21,22,22,22,23,23,23},//37
        {20,21,21,22,22,23,23,23,24},//38
        {21,21,22,22,23,23,23,24,24},//39
        {21,21,22,23,23,23,24,24,24},//40
        {21,22,22,23,23,24,24,24,25},//41
        {22,22,23,23,24,24,24,25,25},//42
        {22,22,23,24,24,24,25,25,25},//43
        {22,23,23,24,24,25,25,25,25},//44
        {23,23,24,24,25,25,25,25,25},//45
        {23,23,24,25,25,25,25,25,25},//46
        {23,24,24,25,25,25,25,25,25},//47
        {24,24,25,25,25,25,25,25,25},//48
        {24,24,25,25,25,25,25,25,25},//49
        {24,25,25,25,25,25,25,25,25},//50
        {24,25,25,25,25,25,25,25,25},//51
    };

     private static readonly int[,] MalePushUpScoreTable = new int[53, 9]
    {
        {0,0,0,0,0,0,0,0,1},   // 7
        {0,0,0,0,0,0,0,1,2},   // 8
        {0,0,0,0,0,0,1,2,4},   // 9
        {0,0,0,0,0,1,2,4,6},   // 10
        {0,0,0,0,1,2,4,6,8},   // 11
        {0,0,0,1,2,4,6,8,9},   // 12
        {0,0,1,2,4,6,8,9,10},  // 13
        {0,1,2,4,6,8,9,10,11}, // 14
        {1,2,4,6,8,9,10,11,12},// 15
        {2,4,6,8,9,10,11,12,13},// 16
        {4,6,8,9,10,11,12,13,14},// 17
        {6,8,9,10,11,12,13,14,15},// 18
        {8,9,10,11,12,13,14,15,15},// 19
        {9,10,11,12,13,14,15,15,16},// 20
        {10,11,12,13,14,15,15,16,16},// 21
        {11,12,13,14,15,15,16,16,16},// 22
        {12,13,14,15,15,16,16,16,17},// 23
        {13,14,15,15,16,16,16,17,17},// 24
        {14,15,15,16,16,16,17,17,17},// 25
        {15,15,16,16,16,17,17,17,18},// 26
        {15,16,16,17,17,17,18,18,18},// 27
        {16,16,17,17,17,18,18,18,18},// 28
        {16,17,17,17,18,18,18,18,19},// 29
        {17,17,17,18,18,18,18,19,19},// 30
        {17,17,18,18,18,19,19,19,19},// 31
        {17,18,18,18,19,19,19,19,20},// 32
        {18,18,18,19,19,19,20,20,20},// 33
        {18,18,19,19,19,20,20,20,20},// 34
        {18,19,19,19,20,20,20,20,20},// 35
        {19,19,19,20,20,20,20,20,21},// 36
        {19,19,20,20,20,20,21,21,21},// 37
        {19,20,20,20,20,21,21,21,21},// 38
        {20,20,20,20,21,21,21,21,21},// 39
        {20,20,20,21,21,21,21,21,22},// 40
        {20,20,21,21,21,21,21,22,22},// 41
        {20,21,21,21,21,21,22,22,22},// 42
        {21,21,21,21,21,22,22,22,22},// 43
        {21,21,21,21,22,22,22,22,23},// 44
        {21,21,21,22,22,22,22,23,23},// 45
        {21,21,22,22,22,22,23,23,23},// 46
        {21,22,22,22,22,23,23,23,23},// 47
        {22,22,22,22,23,23,23,23,24},// 48
        {22,22,22,23,23,23,23,24,24},// 49
        {22,22,23,23,23,23,24,24,24},// 50
        {22,23,23,23,23,24,24,24,24},// 51
        {23,23,23,23,24,24,24,24,25},// 52
        {23,23,23,24,24,24,24,25,25},// 53
        {23,23,24,24,24,24,25,25,25},// 54
        {23,24,24,24,24,25,25,25,25},// 55
        {24,24,24,24,25,25,25,25,25},// 56
        {24,24,24,25,25,25,25,25,25},// 57
        {24,24,25,25,25,25,25,25,25},// 58
        {24,25,25,25,25,25,25,25,25},// 59
    };

    private static readonly int[,] FemalePushUpScoreTable = new int[43, 9]
    {
        {0,0,0,0,0,0,0,0,1},  // 7
        {0,0,0,0,0,0,0,1,5},  // 8
        {0,0,0,0,0,0,1,5,10}, // 9
        {0,0,0,0,0,1,5,10,15},//10
        {0,0,0,0,1,5,10,15,15},//11
        {0,0,0,1,5,10,15,15,16},//12
        {0,0,1,5,10,15,15,16,17},//13
        {0,1,5,10,15,15,16,17,18},//14
        {1,5,10,15,15,16,17,18,18},//15
        {5,10,15,15,16,17,18,18,18},//16
        {10,15,15,16,17,18,18,18,19},//17
        {15,15,16,17,18,18,18,19,19},//18
        {15,16,17,18,18,18,19,19,19},//19
        {16,17,18,18,18,19,19,19,20},//20
        {17,18,18,18,19,19,19,20,20},//21
        {18,18,18,19,19,19,20,20,20},//22
        {18,18,19,19,19,20,20,20,21},//23
        {18,19,19,19,20,20,20,21,21},//24
        {19,19,19,20,20,20,21,21,21},//25
        {19,19,20,20,20,21,21,21,22},//26
        {20,20,20,20,21,21,21,22,22},//27
        {20,20,20,21,21,21,22,22,22},//28
        {20,20,21,21,21,22,22,22,23},//29
        {20,21,21,21,22,22,22,23,23},//30
        {21,21,21,22,22,22,23,23,23},//31
        {21,21,22,22,22,23,23,23,24},//32
        {21,22,22,22,23,23,23,24,24},//33
        {22,22,22,23,23,23,24,24,24},//34
        {22,22,23,23,23,24,24,24,25},//35
        {22,23,23,23,24,24,24,25,25},//36
        {23,23,23,24,24,24,25,25,25},//37
        {23,23,24,24,24,25,25,25,25},//38
        {23,24,24,24,25,25,25,25,25},//39
        {24,24,24,25,25,25,25,25,25},//40
        {24,24,25,25,25,25,25,25,25},//41
        {24,25,25,25,25,25,25,25,25},//42
        {24,25,25,25,25,25,25,25,25},//43
        {24,25,25,25,25,25,25,25,25},//44
        {24,25,25,25,25,25,25,25,25},//45
        {24,25,25,25,25,25,25,25,25},//46
        {24,25,25,25,25,25,25,25,25},//47
        {24,25,25,25,25,25,25,25,25},//48
        {24,25,25,25,25,25,25,25,25},//49
    };

    public static int GetSitUpScore(string gender, int reps, int ageGroup)
    {
        var g = gender?.ToLower();
        int ageIndex = ageGroup - 1;

         if (ageGroup < 1 || ageGroup > 9)
            throw new ArgumentOutOfRangeException(nameof(ageGroup), "Age group must be between 1 and 9.");

        if (reps <= 6) return 0;

        if (g == "male")
        {
            if (reps >= 60) return 25;
            if (reps >= 7 && reps < 60)
                return MaleSitUpScoreTable[reps - 7, ageIndex];
        }
        else if (g == "female")
        {
            if (reps >= 52) return 25;
            if (reps >= 7 && reps < 52)
                return FemaleSitUpScoreTable[reps - 7, ageIndex];
        }        
        return 0; // fallback in case of invalid gender or range
    }       

    public static int GetPushUpScore(string gender, int reps, int ageGroup)
    {
        var g = gender?.ToLower();
        int ageIndex = ageGroup - 1;

        if (ageGroup < 1 || ageGroup > 9)
            throw new ArgumentOutOfRangeException(nameof(ageGroup), "Age group must be between 1 and 9.");

        if (reps <= 6) return 0;

        if (g == "male")
        {
            if (reps >= 60) return 25;
            if (reps >= 7 && reps < 60)
                return MalePushUpScoreTable[reps - 7, ageIndex];
        }
        else if (g == "female")
        {
            if (reps >= 50) return 25;
            if (reps >= 7 && reps < 50)
                return FemalePushUpScoreTable[reps - 7, ageIndex];
        }
        return 0; // fallback in case of invalid gender or range

    }

    public static int GetRunScore(string gender, string runTime, int ageGroup)
    {
        var g = gender?.ToLower();
        if (ageGroup < 1 || ageGroup > 9)
            throw new ArgumentOutOfRangeException(nameof(ageGroup), "Age group must be 1-9.");
        int ageIndex = ageGroup - 1;

        if (!runTime.Contains("."))
            throw new ArgumentException("Run time must be in minutes.seconds format, e.g., 10.30");
        var parts = runTime.Split('.');
        if (parts.Length != 2 || !int.TryParse(parts[0], out int minutes) || !int.TryParse(parts[1], out int seconds))
            throw new ArgumentException("Invalid run time format. Please enter as minutes.seconds, e.g., 10.30");

        int totalSeconds = minutes * 60 + seconds;

        if (g == "male")
        {
            for (int i = 0; i < MaleTimeThresholdsSeconds.Length; i++)
            {
                if (totalSeconds <= MaleTimeThresholdsSeconds[i])
                {
                    int index = i == 0 ? 0 : i - 1;
                    int score = MaleRunScoreTable[ageIndex][index-1];
                    Console.WriteLine($"[Run] Gender: Male, AgeGroup: {ageGroup}, RunTime: {runTime} => Time(sec): {totalSeconds}, ThresholdIndex: {index}, Score: {score}");
                    return score;
                }
            }
            return 0; // Slower than slowest threshold which is 1140 seconds = 
        }
        else if (g == "female")
        {
            for (int i = 0; i < FemaleTimeThresholdsSeconds.Length; i++)
            {
                if (totalSeconds <= FemaleTimeThresholdsSeconds[i])
                {
                    int index = i == 0 ? 0 : i - 1;
                    int score = FemaleRunScoreTable[ageIndex][index-1];
                    Console.WriteLine($"[Run] Gender: Female, AgeGroup: {ageGroup}, RunTime: {runTime} => Time(sec): {totalSeconds}, ThresholdIndex: {index}, Score: {score}");
                    return score;
                }
            }
            return 0; // Slower than slowest threshold
        }
        return 0; // fallback in case of invalid gender or range
    }    

    // Converts your time thresholds in table rows (8:30, 8:40, ...) into seconds:
    private static readonly int[] MaleTimeThresholdsSeconds = new int[]
    {
        510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640,
        650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780,
        790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920,
        930, 940, 950, 960, 970, 980, 990,1000,1010,1020,1030,1040,1050
    };

    // Each row corresponds to age groups 1–9, each column to TimeThresholdsSeconds[i]:
    private static readonly int[][] MaleRunScoreTable = new int[][]
    {
        // Age Group 1 (<22)
        new int[] {50,49,48,47,46,45,44,43,42,41,40,39,38,38,37,37,36,36
        ,35,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,16,14,
        12,10,8,6,4,2,1,0,0,0,0,0,0,0,0,0},

        // Age Group 2 (22-24)
        new int[] {50,50,49,48,47,46,45,44,43,42,41,40,39,38,38,37,37,36,
        36,35,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,16,
        14,12,10,8,6,4,2,1,0,0,0,0,0,0,0,0},

        // Age Group 3 (25-27)
        new int[] {50,50,50,49,48,47,46,45,44,43,42,41,40,39,38,38,37,37,
        36,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,16,14,
        12,10,8,6,4,2,1,0,0,0,0,0,0,0,0},

        // Age Group 4 (28-30)
        new int[] {50,50,50,50,50,49,48,47,46,45,44,43,42,41,40,39,38,38,
        37,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,18,16,
        14,12,10,8,6,4,2,1,0,0,0,0,0,0,0,0},

        // Age Group 5 (31-33)
        new int[] {50,50,50,50,50,50,49,48,47,46,45,44,43,42,41,40,39,38,
        38,37,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,19,18,16,
        14,12,10,8,6,4,2,1,0,0,0,0,0,0,0},

        // Age Group 6 (34-36)
        new int[] {50,50,50,50,50,50,50,49,48,47,46,45,44,43,42,41,40,39,
        38,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,
        16,14,12,10,8,6,4,2,1,0,0,0,0,0,0},

        // Age Group 7 (37-39)
        new int[] {50,50,50,50,50,50,50,50,49,48,47,46,45,44,43,42,41,40,
        39,38,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,
        18,16,14,12,10,8,6,4,2,1,0,0,0,0,0},

        // Age Group 8 (40-42)
        new int[] {50,50,50,50,50,50,50,50,50,49,48,47,46,45,44,43,42,41,
        40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,
        18,16,14,12,10,8,6,4,2,1,0,0,0,0,0},

        // Age Group 9 (43-45)
        new int[] {50,50,50,50,50,50,50,50,50,50,49,48,47,46,45,44,43,42,
        41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,
        19,18,16,14,12,10,8,6,4,2,1}
    };

    private static readonly int[] FemaleTimeThresholdsSeconds = new int[]
    {
        600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790,
        800, 810, 820, 830, 840, 850, 860, 870, 880, 890,900, 910, 920, 930, 940, 950, 960, 970, 980, 990,
        1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 
        1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290
    };

    private static readonly int[][] FemaleRunScoreTable = new int[][]
    {
        // Age Group 1 (<22)
        new int[] {
            50,49,48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,39,39,38,
            38,38,37,37,37,36,36,36,35,35,35,34,34,33,33,32,32,31,31,30,
            30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,6,4,2,1,
            0,0,0,0,0,0,0,0,0,0
        },
        // Age Group 2 (22–24)
        new int[] {
            50,50,50,49,48,47,46,46,45,45,44,44,43,43,42,42,41,41,39,39,
            38,38,37,37,37,36,36,36,35,35,35,34,34,33,33,32,32,31,31,30,
            30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,6,4,2,1,
            0,0,0,0,0,0,0,0,0,0
        },
        // Age Group 3 (25–27)
        new int[] {
            50,50,50,50,49,48,47,48,47,46,45,44,44,43,43,42,42,41,39,39,
            39,38,38,38,37,37,37,36,36,35,35,35,35,34,34,33,33,32,32,31,
            31,30,30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,6,4,
            2,1,0,0,0,0,0,0,0,0
        },
        // Age Group 4 (28–30)
        new int[] {
            50,50,50,50,50,49,49,49,48,47,46,45,45,44,44,43,43,42,41,41,
            39,39,39,38,38,38,37,37,37,36,36,36,35,35,34,34,33,33,32,32,
            31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,
            6,4,2,1,0,0,0,0,0,0
        },
        // Age Group 5 (31–33)
        new int[] {
            50,50,50,50,50,50,50,49,48,47,47,46,46,45,45,44,44,43,42,41,
            41,39,39,39,38,38,37,37,37,36,36,36,35,35,34,34,33,33,32,32,
            31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,
            6,4,2,1,0,0,0,0,0,0
        },
        // Age Group 6 (34–36)
        new int[] {
            50,50,50,50,50,50,50,50,50,49,48,47,46,46,45,45,44,44,43,42,
            41,41,39,39,38,38,38,37,37,37,36,36,35,35,34,34,33,33,32,32,
            31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,16,14,12,10,8,
            6,4,2,1,0,0,0,0,0,0
        },
        // Age Group 7 (37–39)
        new int[] {
            50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,48,47,46,
            45,44,43,42,41,39,39,38,38,38,37,37,37,36,36,35,35,34,34,33,
            33,32,32,31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,16,14,
            12,10,8,6,4,2,1,0,0,0
        },
        // Age Group 8 (40–42)
        new int[] {
            50,50,50,50,50,50,50,50,50,50,49,48,47,46,46,45,45,44,44,43,
            43,42,42,41,41,39,39,38,38,38,37,37,37,36,36,36,35,35,35,34,
            34,33,33,32,32,31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,
            16,14,12,10,8,6,4,2,1,0
        },
        // Age Group 9 (43–45)
        new int[] {
            50,50,50,50,50,50,50,50,50,50,49,48,47,46,46,45,45,44,44,43,
            43,42,42,41,41,39,39,38,38,38,37,37,37,36,36,36,35,35,35,34,
            34,33,33,32,32,31,31,30,30,29,28,27,26,25,24,23,22,21,20,18,
            16,14,12,10,8,6,4,2,1,0
        }
    };
}

